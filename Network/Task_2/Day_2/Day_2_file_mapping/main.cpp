#include "filemapping.h"
#include <stdio.h>
#include <string.h>
#include <assert.h>
#include <stdlib.h>
#include <errno.h>

void checkFileMapping();

#define Segment_Size 64

unsigned char headCheckData[Segment_Size] = {
	// Offset 0x00000000 to 0x0000003F
	0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D,
	0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x04, 0x38, 0x00, 0x00, 0x05, 0xF7,
	0x08, 0x06, 0x00, 0x00, 0x00, 0xAA, 0xD9, 0xCB, 0x5A, 0x00, 0x00, 0x00,
	0x04, 0x67, 0x41, 0x4D, 0x41, 0x00, 0x00, 0xB1, 0x8F, 0x0B, 0xFC, 0x61,
	0x05, 0x00, 0x00, 0x00, 0x20, 0x63, 0x48, 0x52, 0x4D, 0x00, 0x00, 0x7A,
	0x26, 0x00, 0x00, 0x80
};
unsigned char tailCheckData[Segment_Size] = {
	// Offset 0x00087BA2 to 0x00087BE1
	0xD1, 0x99, 0xD6, 0x13, 0x3A, 0x71, 0x85, 0x3C, 0xD4, 0x8A, 0xC6, 0xA0,
	0xF8, 0xEB, 0x4D, 0x82, 0x83, 0xDB, 0xCB, 0x38, 0x68, 0x44, 0x9F, 0xC3,
	0xBA, 0x22, 0xA5, 0x90, 0xD6, 0x1C, 0x2B, 0x50, 0xD5, 0x44, 0x27, 0xD6,
	0x33, 0xD4, 0x30, 0xA8, 0x9D, 0xBD, 0xFE, 0x02, 0x36, 0x83, 0xA3, 0xC8,
	0x10, 0x57, 0x8C, 0x76, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4E, 0x44,
	0xAE, 0x42, 0x60, 0x82
};

#define CheckSegment(_ck_seg_name, _ck_data_name, _ck_size) \
printf( #_ck_seg_name ": %s\n", memcmp(_ck_seg_name, _ck_data_name, _ck_size)?"failed":"passed")

//unsigned char head[Segment_Size], tail[Segment_Size];

/// Print in hexadecimal format.
inline void hexPrint(size_t count, const unsigned char* buf) {
	if (!buf || !count)return;
	const unsigned char* ptr = buf,
		* end = ptr + count;

	while (1) {
		printf("%.2X", *ptr);
		++ptr;
		if (ptr == end) break;
		putchar(' ');
	}
}

#define NoRedirect

int main() {
	FILE* stream = NULL;
	// Check FileMappingReader
	checkFileMapping();

	// Map
    FileMappingReader reader(TEXT("source.png"));
    assert( reader.fileSize() > Segment_Size );
    FileMappingBlock blockHead ,blockTail;

    reader.map(0, Segment_Size, &blockHead);
    
    reader.map(reader.fileSize() - Segment_Size, Segment_Size, &blockTail);

	printf("Successfully mapped file.\n");
	
	// Check 
	CheckSegment(blockHead.base, headCheckData, blockHead.size - blockHead.offset());
	CheckSegment(blockTail.base, tailCheckData, blockHead.size - blockHead.offset());

	// Print
#ifndef NoRedirect
	if (!freopen("output.txt", "wt", stdout)) {
		fprintf(stderr, "Open failed (output.txt) : %s\n", strerror(errno));
		exit(1);
	}
#endif

	hexPrint(blockHead.size - blockHead.offset(), (unsigned char*) blockHead.base);
	printf("\n");
	hexPrint(blockTail.size - blockTail.offset(), (unsigned char*) blockTail.base);
	printf("\n");

#ifndef NoRedirect
#ifdef _WIN32
	if (freopen("con", "w", stdout)) {
#else
    if (freopen("/dev/tty", "w", stdout)) {
#endif
		printf("Read output.txt for details.\n");
	}
#endif

	// Exit
	return 0;
}


void checkFileMapping() {
	static unsigned char _checkBytes[256] = {
		// Offset 0x00000000 to 0x000000FF
		0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D,
		0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x04, 0x38, 0x00, 0x00, 0x05, 0xF7,
		0x08, 0x06, 0x00, 0x00, 0x00, 0xAA, 0xD9, 0xCB, 0x5A, 0x00, 0x00, 0x00,
		0x04, 0x67, 0x41, 0x4D, 0x41, 0x00, 0x00, 0xB1, 0x8F, 0x0B, 0xFC, 0x61,
		0x05, 0x00, 0x00, 0x00, 0x20, 0x63, 0x48, 0x52, 0x4D, 0x00, 0x00, 0x7A,
		0x26, 0x00, 0x00, 0x80, 0x84, 0x00, 0x00, 0xFA, 0x00, 0x00, 0x00, 0x80,
		0xE8, 0x00, 0x00, 0x75, 0x30, 0x00, 0x00, 0xEA, 0x60, 0x00, 0x00, 0x3A,
		0x98, 0x00, 0x00, 0x17, 0x70, 0x9C, 0xBA, 0x51, 0x3C, 0x00, 0x00, 0x00,
		0x06, 0x62, 0x4B, 0x47, 0x44, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0xA0,
		0xBD, 0xA7, 0x93, 0x00, 0x00, 0x80, 0x00, 0x49, 0x44, 0x41, 0x54, 0x78,
		0xDA, 0xEC, 0xFD, 0x57, 0x93, 0x6C, 0x57, 0x76, 0x26, 0x08, 0x7E, 0x5B,
		0x1C, 0xE9, 0x2A, 0x74, 0x5C, 0x09, 0x5C, 0x00, 0x09, 0x64, 0x26, 0x99,
		0x48, 0x32, 0xA9, 0x8A, 0xC5, 0xEA, 0x22, 0xBB, 0x7A, 0x7A, 0xDA, 0xA6,
		0xC7, 0x6C, 0xCC, 0xC6, 0xE6, 0xA5, 0xC7, 0xFA, 0x69, 0x7E, 0xDF, 0xBC,
		0xCC, 0xC3, 0x3C, 0x4C, 0x77, 0x9B, 0x55, 0x4F, 0x0D, 0x9B, 0x2C, 0x76,
		0x51, 0x24, 0x99, 0x4C, 0x9D, 0x40, 0x42, 0x5D, 0x19, 0x37, 0x94, 0xEB,
		0xA3, 0xB6, 0x98, 0x87, 0xB5, 0xCF, 0xF1, 0xE3, 0x1E, 0xEE, 0x1E, 0xEE,
		0x11, 0x1E, 0x02, 0x48, 0x2C, 0xB3, 0x4C, 0x00, 0xF7, 0xBA, 0x1F, 0x3F,
		0x62, 0x9F, 0xBD, 0xD7, 0x5E, 0xEB, 0x13, 0xEC, 0xDF, 0xFF, 0x8F, 0x7F,
		0x68, 0xB1, 0xE1, 0x60, 0x1C, 0xF0, 0x5B, 0x12, 0x41, 0x4B, 0x82, 0x71,
		0x06, 0x6B, 0x2C, 0x2C, 0x00, 0xCE, 0x00, 0x80, 0xA1, 0x48, 0x34, 0xD2,
		0x6E, 0x01, 0xA3, 0x2E
	};
	static const int checkOffset = 63;
	static const int checkSize = sizeof(_checkBytes) - checkOffset;

	unsigned char* checkBytes = new unsigned char[checkSize] {};

	FileMappingReader reader(TEXT("source.png"));

	reader.readBytes(checkBytes, checkOffset, checkSize);

	int isFailed = memcmp(checkBytes, _checkBytes+checkOffset, checkSize);
	printf("FileMappingReader: %s\n", isFailed ? "failed" : "passed");

	delete[] checkBytes;
}
